scalar DateTime
scalar JSON

interface ResponsePayload {
  success: Boolean!
  code: [String!]
}

enum TeamStatus {
  PRIVATE
  SUSPENDED
  DEACTIVATED
  OPEN_TO_CONNECT
  PUBLIC
  DELETED
}

enum TeamRole {
  OWNER
  COACH
  MANAGER
  ANALYST
  IGL
  SUPPORT
  SNIPER
  ASSAULTER
  SUBSTITUTE
  ANY
  NOT_MENTIONED
}

type TeamMember {
  id: ID!
  userId: ID!
  teamId: ID!
  role: [TeamRole!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TeamInvitationStatus {
  SENT
  WITHDRAWN
  EXPIRED
  ACCEPTED
  REJECTED
}

type Team {
  id: ID!
  name: String!
  description: String!
  game: String!
  teamProfilePicture: String
  teamBannerPicture: String
  status: TeamStatus!
  teamMembers: [TeamMember!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamInvitation {
  id: ID!
  team: Team!
  sendBy: ID!
  sendTo: ID!
  roles: [TeamRole!]!
  status: TeamInvitationStatus!
  expiration: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateTeamInput {
  name: String!
  description: String!
  game: String!
  ownerId: ID!
}

input SendTeamInvitationInput {
  teamId: ID!
  sendBy: ID!
  sendTo: ID!
  expiration: DateTime!
  roles: [TeamRole!]!
}

input AcceptTeamInvitationInput {
  invitationId: ID!
  whoIsAccepting: ID!
}

input RejectTeamInvitationInput {
  invitationId: ID!
  whoIsRejecting: ID!
}

input WithdrawTeamInvitationInput {
  invitationId: ID!
  whoIsWithdrawing: ID!
}

type CreateTeamResponse implements ResponsePayload {
  success: Boolean!
  code: [String!]
  team: Team
}

type SendTeamInvitationResponse implements ResponsePayload {
  success: Boolean!
  code: [String!]
  invitation: TeamInvitation
}

type AcceptTeamInvitationResponse implements ResponsePayload {
  success: Boolean!
  code: [String!]
}

type RejectTeamInvitationResponse implements ResponsePayload {
  success: Boolean!
  code: [String!]
}

type WithdrawTeamInvitationResponse implements ResponsePayload {
  success: Boolean!
  code: [String!]
}

input AllTeamInvitationsInput {
  invitedUserId: ID!
}

type AllTeamInvitationsResponse implements ResponsePayload {
  success: Boolean!
  code: [String!]
  invitations: [TeamInvitation!]
}

type Query {
  # team(id: ID!): Team
  # teamByOwner(ownerId: ID!): Team
  # teamInvitationsByTeam(teamId: ID!): [TeamInvitation!]

  getAllTeamInvitations(input: AllTeamInvitationsInput!): AllTeamInvitationsResponse
}

type Mutation {
  createTeam(input: CreateTeamInput!): CreateTeamResponse!

  # Tried putting all accept, reject and withdraw invitation in single mutation, 
  # but it becomes so complicated so creating separate mutations for same
  sendTeamInvitation(input: SendTeamInvitationInput!): SendTeamInvitationResponse!
  acceptTeamInvitation(input: AcceptTeamInvitationInput!): AcceptTeamInvitationResponse!
  rejectTeamInvitation(input: RejectTeamInvitationInput!): RejectTeamInvitationResponse!
  withdrawTeamInvitation(input: WithdrawTeamInvitationInput!): WithdrawTeamInvitationResponse!
}