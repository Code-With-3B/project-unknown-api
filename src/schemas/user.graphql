scalar DateTime
scalar JSON

enum GenderType {
  MALE
  FEMALE
  PREFER_NOT_SAY
}

enum VerificationStatusType { # Player will be marked as verified when he or she adds any game to profile
  UNVERIFIED_PLAYER # User or professional is not yet verified.
  VERIFIED_PLAYER # User is verified as a player. 
  VERIFIED_COACH
  UNVERIFIED_COACH
  VERIFIED_ESPORTS_PROFESSIONAL
  UNVERIFIED_ESPORTS_PROFESSIONAL
  ADMIN # Openly show that this account is admin or the cfo accounts :)
}

# how we interact with other account
enum AccountInteractionType {
  FOLLOW
  UNFOLLOW
  BLOCK
}

# Represents account visibility
enum AccountVisibilityType {
  PUBLIC
  PRIVATE
}

# Represents account state
enum AccountStateType {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum AuthMode {
  EMAIL_PASS # Email and password authentication.
  PHONE_PASS # Phone number and password authentication.
  GOOGLE # Google authentication.
  FACEBOOK # Facebook authentication.
  APPLE # Apple authentication.
}

interface ResponsePayload {
    success: Boolean!
    code: [String!]
}

type User {
  id: ID! # Unique identifier for the user.
  username: String! # Username of the user.
  fullName: String! # Full name of the user.
  accountState: AccountStateType!
  accountVisibility: AccountVisibilityType!
  profilePicture: String
  profileBanner: String
  birthday: String
  phone: String # Phone number of the user (optional).
  email: String # Email address of the user (optional).
  password: String! # Password for the user account.
  bio: String # Biography or profile description of the user (optional).
  gender: GenderType # In future if orgs or teams want to search only female players
  authMode: AuthMode! # Authentication mode of the user.
  verificationStatus: VerificationStatusType! # Verification status of the user.
  preferredGames: [ID!] # List of preferred games for the user.
  achievements: [ID!] # List of achievements earned by the user.
  skills: [ID!] # List of skills recorded for the user.
  highlights: [ID!] # List of highlights in the user's profile.
  teams: [ID!] # List of teams the user belongs to.
  fbToken: String!
  createdAt: DateTime # Date and time when the user account was created.
  updatedAt: DateTime # Date and time when the user account was last updated.
}

type UserResponse implements ResponsePayload {
  success: Boolean! # Indicates whether the user-related mutation was successful.
  code: [String!] # Used to provide any message or to display errors
}
type CheckDuplicateUserResponse {
  isDuplicate: Boolean! # Indicates whether the username is a duplicate.
}

input SignUpInput {
  fullName: String! # Full name for the new user.
  username: String! # Username for the new user.
  phone: String # Phone number for the new user (optional).
  email: String # Email address for the new user (optional).
  password: String # Password for the new user.
  gender: GenderType
  birthday: String
  authMode: AuthMode! # Authmode for creating or signing-up the new user.
}

input CheckDuplicateUserInput {
  username: String! # Username to be checked for duplication.
}

type UserInteraction {
  id: ID!
  actor: ID! # current user, if A wants to follow B, then actor is A
  target: ID! # its B
  actionType: AccountInteractionType! #defines action
  createdAt: String!
  updatedAt: String!
}

input UpdateUserConnectionInput {
  actor: ID! # current user, if A wants to follow B, then actor is A
  target: ID! # its B
  actionType: AccountInteractionType! #defines action
}

type UpdateUserConnectionResponse implements ResponsePayload{
  success: Boolean!
  code: [String!]
}

input UpdateUserInput {
  id: String! # ID of the user to be updated.
  fullName: String # Updated full name for the user (optional).
  username: String # Updated username for the user (optional).
  phone: String # Updated phone number for the user (optional).
  email: String # Updated email address for the user (optional).
  password: String # Updated password for the user (optional).
  birthday: String
  bio: String # Updated biography or profile description for the user (optional).
  profilePictureUri: String # Updated URI for the profile picture (optional).
  profileBannerUri: String # Updated URI for the profile banner (optional).
  gender: GenderType
  accountVisibility: AccountVisibilityType
  accountState: AccountStateType
  verificationStatus: VerificationStatusType
}

type Query {
    user(username: String): User
    users: [User!]
    checkDuplicateUsername(input: CheckDuplicateUserInput!): CheckDuplicateUserResponse!
}

type Mutation {
    signUp(input: SignUpInput!): UserResponse!
    updateUser(input: UpdateUserInput!): UserResponse!
    updateUserConnection(input: UpdateUserConnectionInput!): UpdateUserConnectionResponse!
}
