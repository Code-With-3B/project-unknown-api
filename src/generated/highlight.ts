/* eslint-disable */
// @ts-nocheck
// THIS FILE IS AUTOGENERATED DO NOT MODIFY BY HAND
import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type Comment = {
  __typename?: 'Comment';
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  likes: Array<Scalars['ID']['output']>;
  postId: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  userId: Scalars['ID']['output'];
};

export type CreateHighlightInput = {
  content: Scalars['String']['input'];
  media: Array<Scalars['String']['input']>;
  state: PostState;
  userId: Scalars['ID']['input'];
};

export type CreateHighlightResponse = ResponsePayload & {
  __typename?: 'CreateHighlightResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  highlight?: Maybe<Highlight>;
  success: Scalars['Boolean']['output'];
};

export type Highlight = {
  __typename?: 'Highlight';
  comments: Array<Comment>;
  content: Scalars['String']['output'];
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  likes: Array<Scalars['ID']['output']>;
  media: Array<Scalars['String']['output']>;
  shareCount: Scalars['Int']['output'];
  state: PostState;
  updatedAt?: Maybe<Scalars['String']['output']>;
  userId: Scalars['ID']['output'];
};

export type LikeHighlightInput = {
  liked?: InputMaybe<Scalars['Boolean']['input']>;
  postId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
};

export type LikeHighlightResponse = ResponsePayload & {
  __typename?: 'LikeHighlightResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  success: Scalars['Boolean']['output'];
};

export type Media = {
  __typename?: 'Media';
  fileId: Scalars['String']['output'];
  type: MediaType;
};

export enum MediaType {
  HighlightImage = 'HIGHLIGHT_IMAGE',
  HighlightVideo = 'HIGHLIGHT_VIDEO',
  ProfileBanner = 'PROFILE_BANNER',
  ProfilePicture = 'PROFILE_PICTURE'
}

export type Mutation = {
  __typename?: 'Mutation';
  createHighlight: CreateHighlightResponse;
  likeHighlight: LikeHighlightResponse;
};


export type MutationCreateHighlightArgs = {
  input: CreateHighlightInput;
};


export type MutationLikeHighlightArgs = {
  input: LikeHighlightInput;
};

export enum PostState {
  Archived = 'ARCHIVED',
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

export type ResponsePayload = {
  code?: Maybe<Array<Scalars['String']['output']>>;
  success: Scalars['Boolean']['output'];
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = {
  ResponsePayload: ( CreateHighlightResponse ) | ( LikeHighlightResponse );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Comment: ResolverTypeWrapper<Comment>;
  CreateHighlightInput: CreateHighlightInput;
  CreateHighlightResponse: ResolverTypeWrapper<CreateHighlightResponse>;
  Highlight: ResolverTypeWrapper<Highlight>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  LikeHighlightInput: LikeHighlightInput;
  LikeHighlightResponse: ResolverTypeWrapper<LikeHighlightResponse>;
  Media: ResolverTypeWrapper<Media>;
  MediaType: MediaType;
  Mutation: ResolverTypeWrapper<{}>;
  PostState: PostState;
  ResponsePayload: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ResponsePayload']>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Boolean: Scalars['Boolean']['output'];
  Comment: Comment;
  CreateHighlightInput: CreateHighlightInput;
  CreateHighlightResponse: CreateHighlightResponse;
  Highlight: Highlight;
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  LikeHighlightInput: LikeHighlightInput;
  LikeHighlightResponse: LikeHighlightResponse;
  Media: Media;
  Mutation: {};
  ResponsePayload: ResolversInterfaceTypes<ResolversParentTypes>['ResponsePayload'];
  String: Scalars['String']['output'];
};

export type CommentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Comment'] = ResolversParentTypes['Comment']> = {
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  likes?: Resolver<Array<ResolversTypes['ID']>, ParentType, ContextType>;
  postId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateHighlightResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateHighlightResponse'] = ResolversParentTypes['CreateHighlightResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  highlight?: Resolver<Maybe<ResolversTypes['Highlight']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HighlightResolvers<ContextType = any, ParentType extends ResolversParentTypes['Highlight'] = ResolversParentTypes['Highlight']> = {
  comments?: Resolver<Array<ResolversTypes['Comment']>, ParentType, ContextType>;
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  likes?: Resolver<Array<ResolversTypes['ID']>, ParentType, ContextType>;
  media?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  shareCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  state?: Resolver<ResolversTypes['PostState'], ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LikeHighlightResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['LikeHighlightResponse'] = ResolversParentTypes['LikeHighlightResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['Media'] = ResolversParentTypes['Media']> = {
  fileId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['MediaType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createHighlight?: Resolver<ResolversTypes['CreateHighlightResponse'], ParentType, ContextType, RequireFields<MutationCreateHighlightArgs, 'input'>>;
  likeHighlight?: Resolver<ResolversTypes['LikeHighlightResponse'], ParentType, ContextType, RequireFields<MutationLikeHighlightArgs, 'input'>>;
};

export type ResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['ResponsePayload'] = ResolversParentTypes['ResponsePayload']> = {
  __resolveType: TypeResolveFn<'CreateHighlightResponse' | 'LikeHighlightResponse', ParentType, ContextType>;
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Comment?: CommentResolvers<ContextType>;
  CreateHighlightResponse?: CreateHighlightResponseResolvers<ContextType>;
  Highlight?: HighlightResolvers<ContextType>;
  LikeHighlightResponse?: LikeHighlightResponseResolvers<ContextType>;
  Media?: MediaResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  ResponsePayload?: ResponsePayloadResolvers<ContextType>;
};

