/* eslint-disable */
// @ts-nocheck
// THIS FILE IS AUTOGENERATED DO NOT MODIFY BY HAND
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type AcceptTeamInvitationInput = {
  invitationId: Scalars['ID']['input'];
  status: TeamInvitationStatus;
};

export type AcceptTeamInvitationResponse = ResponsePayload & {
  __typename?: 'AcceptTeamInvitationResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  success: Scalars['Boolean']['output'];
};

export type AllTeamInvitationsInput = {
  invitedUserId: Scalars['ID']['input'];
};

export type AllTeamInvitationsResponse = ResponsePayload & {
  __typename?: 'AllTeamInvitationsResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  invitations?: Maybe<Array<TeamInvitation>>;
  success: Scalars['Boolean']['output'];
};

export type CreateTeamInput = {
  description: Scalars['String']['input'];
  game: Scalars['String']['input'];
  name: Scalars['String']['input'];
  ownerId: Scalars['ID']['input'];
};

export type CreateTeamResponse = ResponsePayload & {
  __typename?: 'CreateTeamResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  success: Scalars['Boolean']['output'];
  team?: Maybe<Team>;
};

export type DeleteTeamInput = {
  reason: Scalars['String']['input'];
  teamId: Scalars['ID']['input'];
  whoIsDeleting: Scalars['ID']['input'];
};

export type DeleteTeamResponse = ResponsePayload & {
  __typename?: 'DeleteTeamResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  success: Scalars['Boolean']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  acceptTeamInvitation: AcceptTeamInvitationResponse;
  createTeam: CreateTeamResponse;
  deleteTeam: DeleteTeamResponse;
  sendTeamInvitation: SendTeamInvitationResponse;
};


export type MutationAcceptTeamInvitationArgs = {
  input: AcceptTeamInvitationInput;
};


export type MutationCreateTeamArgs = {
  input: CreateTeamInput;
};


export type MutationDeleteTeamArgs = {
  input: DeleteTeamInput;
};


export type MutationSendTeamInvitationArgs = {
  input: SendTeamInvitationInput;
};

export type Query = {
  __typename?: 'Query';
  getAllTeamInvitations?: Maybe<AllTeamInvitationsResponse>;
};


export type QueryGetAllTeamInvitationsArgs = {
  input: AllTeamInvitationsInput;
};

export type ResponsePayload = {
  code?: Maybe<Array<Scalars['String']['output']>>;
  success: Scalars['Boolean']['output'];
};

export type SendTeamInvitationInput = {
  expiration: Scalars['DateTime']['input'];
  roles: Array<TeamRole>;
  sendBy: Scalars['ID']['input'];
  sendTo: Scalars['ID']['input'];
  teamId: Scalars['ID']['input'];
};

export type SendTeamInvitationResponse = ResponsePayload & {
  __typename?: 'SendTeamInvitationResponse';
  code?: Maybe<Array<Scalars['String']['output']>>;
  invitation?: Maybe<TeamInvitation>;
  success: Scalars['Boolean']['output'];
};

export type Team = {
  __typename?: 'Team';
  createdAt: Scalars['DateTime']['output'];
  description: Scalars['String']['output'];
  game: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  status: TeamStatus;
  teamBannerPicture?: Maybe<Scalars['String']['output']>;
  teamMembers?: Maybe<Array<TeamMember>>;
  teamProfilePicture?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type TeamInvitation = {
  __typename?: 'TeamInvitation';
  createdAt: Scalars['DateTime']['output'];
  expiration: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  roles: Array<TeamRole>;
  sendBy: Scalars['ID']['output'];
  sendTo: Scalars['ID']['output'];
  status: TeamInvitationStatus;
  team: Team;
  updatedAt: Scalars['DateTime']['output'];
};

export enum TeamInvitationStatus {
  Accepted = 'ACCEPTED',
  Denied = 'DENIED',
  Expired = 'EXPIRED',
  Sent = 'SENT',
  Withdrawn = 'WITHDRAWN'
}

export type TeamMember = {
  __typename?: 'TeamMember';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  role?: Maybe<Array<TeamRole>>;
  teamId: Scalars['ID']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['ID']['output'];
};

export enum TeamRole {
  Analyst = 'ANALYST',
  Any = 'ANY',
  Assaulter = 'ASSAULTER',
  Coach = 'COACH',
  Igl = 'IGL',
  Manager = 'MANAGER',
  NotMentioned = 'NOT_MENTIONED',
  Owner = 'OWNER',
  Sniper = 'SNIPER',
  Substitute = 'SUBSTITUTE',
  Support = 'SUPPORT'
}

export enum TeamStatus {
  Deactivated = 'DEACTIVATED',
  Deleted = 'DELETED',
  OpenToConnect = 'OPEN_TO_CONNECT',
  Private = 'PRIVATE',
  Suspended = 'SUSPENDED'
}



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = {
  ResponsePayload: ( AcceptTeamInvitationResponse ) | ( AllTeamInvitationsResponse ) | ( CreateTeamResponse ) | ( DeleteTeamResponse ) | ( SendTeamInvitationResponse );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AcceptTeamInvitationInput: AcceptTeamInvitationInput;
  AcceptTeamInvitationResponse: ResolverTypeWrapper<AcceptTeamInvitationResponse>;
  AllTeamInvitationsInput: AllTeamInvitationsInput;
  AllTeamInvitationsResponse: ResolverTypeWrapper<AllTeamInvitationsResponse>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  CreateTeamInput: CreateTeamInput;
  CreateTeamResponse: ResolverTypeWrapper<CreateTeamResponse>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']['output']>;
  DeleteTeamInput: DeleteTeamInput;
  DeleteTeamResponse: ResolverTypeWrapper<DeleteTeamResponse>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  JSON: ResolverTypeWrapper<Scalars['JSON']['output']>;
  Mutation: ResolverTypeWrapper<{}>;
  Query: ResolverTypeWrapper<{}>;
  ResponsePayload: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ResponsePayload']>;
  SendTeamInvitationInput: SendTeamInvitationInput;
  SendTeamInvitationResponse: ResolverTypeWrapper<SendTeamInvitationResponse>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Team: ResolverTypeWrapper<Team>;
  TeamInvitation: ResolverTypeWrapper<TeamInvitation>;
  TeamInvitationStatus: TeamInvitationStatus;
  TeamMember: ResolverTypeWrapper<TeamMember>;
  TeamRole: TeamRole;
  TeamStatus: TeamStatus;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AcceptTeamInvitationInput: AcceptTeamInvitationInput;
  AcceptTeamInvitationResponse: AcceptTeamInvitationResponse;
  AllTeamInvitationsInput: AllTeamInvitationsInput;
  AllTeamInvitationsResponse: AllTeamInvitationsResponse;
  Boolean: Scalars['Boolean']['output'];
  CreateTeamInput: CreateTeamInput;
  CreateTeamResponse: CreateTeamResponse;
  DateTime: Scalars['DateTime']['output'];
  DeleteTeamInput: DeleteTeamInput;
  DeleteTeamResponse: DeleteTeamResponse;
  ID: Scalars['ID']['output'];
  JSON: Scalars['JSON']['output'];
  Mutation: {};
  Query: {};
  ResponsePayload: ResolversInterfaceTypes<ResolversParentTypes>['ResponsePayload'];
  SendTeamInvitationInput: SendTeamInvitationInput;
  SendTeamInvitationResponse: SendTeamInvitationResponse;
  String: Scalars['String']['output'];
  Team: Team;
  TeamInvitation: TeamInvitation;
  TeamMember: TeamMember;
};

export type AcceptTeamInvitationResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AcceptTeamInvitationResponse'] = ResolversParentTypes['AcceptTeamInvitationResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AllTeamInvitationsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AllTeamInvitationsResponse'] = ResolversParentTypes['AllTeamInvitationsResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  invitations?: Resolver<Maybe<Array<ResolversTypes['TeamInvitation']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTeamResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTeamResponse'] = ResolversParentTypes['CreateTeamResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  team?: Resolver<Maybe<ResolversTypes['Team']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DeleteTeamResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTeamResponse'] = ResolversParentTypes['DeleteTeamResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  acceptTeamInvitation?: Resolver<ResolversTypes['AcceptTeamInvitationResponse'], ParentType, ContextType, RequireFields<MutationAcceptTeamInvitationArgs, 'input'>>;
  createTeam?: Resolver<ResolversTypes['CreateTeamResponse'], ParentType, ContextType, RequireFields<MutationCreateTeamArgs, 'input'>>;
  deleteTeam?: Resolver<ResolversTypes['DeleteTeamResponse'], ParentType, ContextType, RequireFields<MutationDeleteTeamArgs, 'input'>>;
  sendTeamInvitation?: Resolver<ResolversTypes['SendTeamInvitationResponse'], ParentType, ContextType, RequireFields<MutationSendTeamInvitationArgs, 'input'>>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  getAllTeamInvitations?: Resolver<Maybe<ResolversTypes['AllTeamInvitationsResponse']>, ParentType, ContextType, RequireFields<QueryGetAllTeamInvitationsArgs, 'input'>>;
};

export type ResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['ResponsePayload'] = ResolversParentTypes['ResponsePayload']> = {
  __resolveType: TypeResolveFn<'AcceptTeamInvitationResponse' | 'AllTeamInvitationsResponse' | 'CreateTeamResponse' | 'DeleteTeamResponse' | 'SendTeamInvitationResponse', ParentType, ContextType>;
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
};

export type SendTeamInvitationResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SendTeamInvitationResponse'] = ResolversParentTypes['SendTeamInvitationResponse']> = {
  code?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  invitation?: Resolver<Maybe<ResolversTypes['TeamInvitation']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TeamResolvers<ContextType = any, ParentType extends ResolversParentTypes['Team'] = ResolversParentTypes['Team']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  game?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['TeamStatus'], ParentType, ContextType>;
  teamBannerPicture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  teamMembers?: Resolver<Maybe<Array<ResolversTypes['TeamMember']>>, ParentType, ContextType>;
  teamProfilePicture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TeamInvitationResolvers<ContextType = any, ParentType extends ResolversParentTypes['TeamInvitation'] = ResolversParentTypes['TeamInvitation']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  expiration?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  roles?: Resolver<Array<ResolversTypes['TeamRole']>, ParentType, ContextType>;
  sendBy?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  sendTo?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['TeamInvitationStatus'], ParentType, ContextType>;
  team?: Resolver<ResolversTypes['Team'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TeamMemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['TeamMember'] = ResolversParentTypes['TeamMember']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  role?: Resolver<Maybe<Array<ResolversTypes['TeamRole']>>, ParentType, ContextType>;
  teamId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  AcceptTeamInvitationResponse?: AcceptTeamInvitationResponseResolvers<ContextType>;
  AllTeamInvitationsResponse?: AllTeamInvitationsResponseResolvers<ContextType>;
  CreateTeamResponse?: CreateTeamResponseResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  DeleteTeamResponse?: DeleteTeamResponseResolvers<ContextType>;
  JSON?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  ResponsePayload?: ResponsePayloadResolvers<ContextType>;
  SendTeamInvitationResponse?: SendTeamInvitationResponseResolvers<ContextType>;
  Team?: TeamResolvers<ContextType>;
  TeamInvitation?: TeamInvitationResolvers<ContextType>;
  TeamMember?: TeamMemberResolvers<ContextType>;
};

